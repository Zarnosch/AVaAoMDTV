Um die Texte und deren Schwierigkeit zu visualisieren, Generieren wir HTML-Dokumente. Im ersten Schritt wird ein Text geladen und in einzelne Sätze gespalten. 
Dabei werden alle für Python unbekannte UTF-8-Zeichen entfernt. Jeder Satz wird einzeln vom Parser analysiert, sodass wir für jeden Satz alle Features einzeln angeben können.
 Auf dieser Logik bauen unsere Datenstrukturen. Wir haben eine Klasse Text, die alle Sätze und die Parser hält. Sätze bestehen auch aus einer Klasse, die jeweils den Satz als Text und die Features enthalten. 

Die Parser (NLTK und Stanfordparser) sind jeweils eigenständige Klassen, wobei diese jeweils für ihren Einsatzzweck und deren speziellen Features angepasst sind. 
Das heißt, der Stanfordparser analysiert die Satztiefe, wobei der NLTK-Parser alle restlichen Features übernimmt. Beide Parser sind eigenständige Frameworks und sind von uns eingebunden wurden.
NLTK ist in Python geschrieben und ist ein perfektes Framework um natürliche Sprachen zu analysieren. 
Der Stanfordparser ist in JAVA implementiert und eignet sich besser zum Analysieren von grammatikalischen Strukturen von Sätzen.

Aus diesen Strukturen wird ein HTML-Dokument generiert, welches von einem Widget geladen und dargestellt wird. 
Das TaggedTextWidget, welches die analysierten Texte entweder in Dokument- oder Blockansicht anzeigt, ist ein Widget, welches vom QWebView erbt und um Funktionen erweitert, die das HTML-Laden und Generieren vereinfachen. 
Die Generierung erfolgt direkt vor dem Anzeigen des Dokumentes, sodass die Aktualität gewährleistet wird. Da wir vom QWebView erben, fällt das Einbinden in die bestehende UI recht einfach und es muss kaum etwas verändert werden.

Das Analysieren erfolgt in einem anderen Thread, sodass UI-Elemente nicht blockiert werden. Direkt nach dem Laden wird ein QThread erzeugt. In QT ist es möglich Objekte in einen anderen Thread zu verschieben.
Aus diesem einfachen Grund haben wir einen ThreadWorker implementiert, der ausgelagert von der Hauptverarbeitungsschleife alle Sätze analysiert. Die zwei Threads kommunizieren dabei über QT-Signale. 
Damit ist eine threadsichere Implementierung gewährleistet. Der ThreadWorker terminiert dabei immer. Das heißt, bei Beendigung der Analyse wird der QThread zerstört und die analysierten Daten an das Hauptprogramm weitergegeben.
Feedback erhält der Nutzer durch eine Progressbar, die in der UI immer präsent ist. Um zu verhindern, dass mehrere Worker gleichzeitig gestartet werden, werden alle Buttons und Menüeinträge deaktiviert,
die das Laden oder analysieren neuer Texte ermöglicht.
